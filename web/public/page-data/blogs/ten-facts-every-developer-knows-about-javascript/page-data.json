{"componentChunkName":"component---src-templates-single-blog-js","path":"/blogs/ten-facts-every-developer-knows-about-javascript","result":{"data":{"sanityBlog":{"title":"Ten Facts Every Developer knows About Javascript","_rawBody":[{"_key":"229f3ed0ea81","_type":"block","children":[{"_key":"50cd2a30c9650","_type":"span","marks":[],"text":"The stackoverflow.com annual Developer Survey told us that JavaScript is the most popular and used programming language in the world. This is because of his great flexibility in most of the possible use cases. So, there aren’t any doubts that learning JavaScript nowadays is almost a must. Here are the top 10 JavaScript tips and tricks that will make you a better, more flexible, and faster developer in this incredible language. Are you ready to become a better JavaScript programmer? Let’s start."}],"markDefs":[],"style":"normal"},{"_key":"fca94d737733","_type":"block","children":[{"_key":"9afac34a75bf0","_type":"span","marks":["strong"],"text":"Use the triple equal (===) instead of the double (==)"}],"level":1,"listItem":"number","markDefs":[],"style":"normal"},{"_key":"1b1d188cd74c","_type":"block","children":[{"_key":"42efd1c6cf8f0","_type":"span","marks":[],"text":"Why? Almost all the other programming languages use a double equal sign. JavaScript is different. The == operator performs an automatic conversion between the types of the operands, so it can tell that they are the same even if they aren’t. On the other hand, the === checks if the operands are the same. For example, here there are some of the output according to this logic:2."}],"markDefs":[],"style":"normal"},{"_key":"a9f6783189a9","_type":"block","children":[{"_key":"ca4c42c66cd40","_type":"span","marks":[],"text":"2. "},{"_key":"ca4c42c66cd41","_type":"span","marks":["strong"],"text":"Create a Self-calling Function"}],"markDefs":[],"style":"normal"},{"_key":"79faabba7b52","_type":"block","children":[{"_key":"844a70f6ba4d0","_type":"span","marks":[],"text":"If you want to create a function and immediately call it, there is a very simple way, that is also very concise. Why should you want to call a function exactly after you defined it? It is very useful during the test of the code, but also when you want to call immediately a code snippet that you just wrote. So, to do this, you have to put two brackets after the closure of the last curly bracket and put all the arguments needed inside"}],"markDefs":[],"style":"normal"},{"_key":"6b12905b4155","_type":"block","children":[{"_key":"6b37d47767fc0","_type":"span","marks":["strong"],"text":"4. Create an array of numbers ordered from 0 to max in one line"}],"markDefs":[],"style":"normal"},{"_key":"6ad63c445ab8","_type":"block","children":[{"_key":"ee6ead50a8fe0","_type":"span","marks":[],"text":"This can be useful to have an array with all the numbers from 0 to a max number, corresponding to the length of the array. This can be useful when you need a sorted array, that is not the usual situation"}],"markDefs":[],"style":"normal"},{"_key":"93af222f7856","_type":"block","children":[{"_key":"ebd53492a4d70","_type":"span","marks":["strong"],"text":"5. Append an array to another array"}],"markDefs":[],"style":"normal"},{"_key":"5794ef3e4acc","_type":"block","children":[{"_key":"1f9dbda1bdee0","_type":"span","marks":[],"text":"This function is useful. You can think that you have your array with data, but via a call to an API ( application programming interface ) you obtain a new array, and you have to melt them together. How to do that? Is better to don’t use a slow, expensive, and a bad-looking for a loop when there is this incredibly easy and powerful function:"}],"markDefs":[],"style":"normal"},{"_key":"bceb4876f352","_type":"block","children":[{"_key":"35cc451802640","_type":"span","marks":["strong"],"text":"7. Ternary operator"}],"markDefs":[],"style":"normal"},{"_key":"6d6c5254b0bb","_type":"block","children":[{"_key":"34633be565a30","_type":"span","marks":[],"text":"This is a one-line alternative to an if check, that works the same way, is better looking, and also more efficient in code space. But, what is the ternary operator? Is an operation with three operators. The first is a condition. If that condition is true, the value of the expression is the second operator, otherwise the third one."}],"markDefs":[],"style":"normal"},{"_key":"4634929b380a","_type":"block","children":[{"_key":"5afd85ae5d2d0","_type":"span","marks":["strong"],"text":"8. Map function to array"}],"markDefs":[],"style":"normal"},{"_key":"911ab6388821","_type":"block","children":[{"_key":"928c97ecd7690","_type":"span","marks":[],"text":"If you want to perform a certain type of operation on all the elements of an array, the map function is the best way to perform it, avoiding other loops and making the code cleaner."}],"markDefs":[],"style":"normal"},{"_key":"acf165d835f7","_type":"block","children":[{"_key":"0f839d0e014d0","_type":"span","marks":["strong"],"text":"10. Use let, not var"}],"markDefs":[],"style":"normal"},{"_key":"141893234d43","_type":"block","children":[{"_key":"2f552937412e0","_type":"span","marks":[],"text":"This wouldn’t affect directly your code, but let is much more efficient, and is also more modern. Let has blocked scope. It means that if you define with let inside a function, that variable will exist only inside that function. So, on other functions, you can create different variables with the same name. With var, you can’t because it is scoped. It means that if you create a variable with var, you can’t use that variable name in other cases, inside functions. This could be annoying. All other programming languages tend to have blocked scope variables, also because scoped ones led to the creation of a lot of bugs and issues that are difficult to be caught. So, avoid this:"}],"markDefs":[],"style":"normal"}],"coverImage":{"asset":{"gatsbyImageData":{"images":{"sources":[],"fallback":{"src":"https://cdn.sanity.io/images/bmgmvqmz/production/f6b1b6fcb1f06af45b02e3c091818f3aa3543c5e-5507x3098.jpg?w=5507&h=3098&auto=format","srcSet":"https://cdn.sanity.io/images/bmgmvqmz/production/f6b1b6fcb1f06af45b02e3c091818f3aa3543c5e-5507x3098.jpg?w=320&h=180&auto=format 320w,\nhttps://cdn.sanity.io/images/bmgmvqmz/production/f6b1b6fcb1f06af45b02e3c091818f3aa3543c5e-5507x3098.jpg?rect=1,0,5506,3098&w=654&h=368&auto=format 654w,\nhttps://cdn.sanity.io/images/bmgmvqmz/production/f6b1b6fcb1f06af45b02e3c091818f3aa3543c5e-5507x3098.jpg?w=768&h=432&auto=format 768w,\nhttps://cdn.sanity.io/images/bmgmvqmz/production/f6b1b6fcb1f06af45b02e3c091818f3aa3543c5e-5507x3098.jpg?w=1024&h=576&auto=format 1024w,\nhttps://cdn.sanity.io/images/bmgmvqmz/production/f6b1b6fcb1f06af45b02e3c091818f3aa3543c5e-5507x3098.jpg?rect=0,0,5507,3096&w=1366&h=768&auto=format 1366w,\nhttps://cdn.sanity.io/images/bmgmvqmz/production/f6b1b6fcb1f06af45b02e3c091818f3aa3543c5e-5507x3098.jpg?w=1600&h=900&auto=format 1600w,\nhttps://cdn.sanity.io/images/bmgmvqmz/production/f6b1b6fcb1f06af45b02e3c091818f3aa3543c5e-5507x3098.jpg?w=1920&h=1080&auto=format 1920w,\nhttps://cdn.sanity.io/images/bmgmvqmz/production/f6b1b6fcb1f06af45b02e3c091818f3aa3543c5e-5507x3098.jpg?w=2048&h=1152&auto=format 2048w,\nhttps://cdn.sanity.io/images/bmgmvqmz/production/f6b1b6fcb1f06af45b02e3c091818f3aa3543c5e-5507x3098.jpg?w=2560&h=1440&auto=format 2560w,\nhttps://cdn.sanity.io/images/bmgmvqmz/production/f6b1b6fcb1f06af45b02e3c091818f3aa3543c5e-5507x3098.jpg?w=3440&h=1935&auto=format 3440w,\nhttps://cdn.sanity.io/images/bmgmvqmz/production/f6b1b6fcb1f06af45b02e3c091818f3aa3543c5e-5507x3098.jpg?w=3840&h=2160&auto=format 3840w,\nhttps://cdn.sanity.io/images/bmgmvqmz/production/f6b1b6fcb1f06af45b02e3c091818f3aa3543c5e-5507x3098.jpg?w=4096&h=2304&auto=format 4096w,\nhttps://cdn.sanity.io/images/bmgmvqmz/production/f6b1b6fcb1f06af45b02e3c091818f3aa3543c5e-5507x3098.jpg?w=5507&h=3098&auto=format 5507w","sizes":"(min-width: 5507px) 5507px, 100vw"}},"layout":"constrained","backgroundColor":"#777575","width":5507,"height":3098}},"alt":"about javascript"},"categories":[{"title":"Web Development","slug":{"current":"web-development"}}],"author":{"name":"John Migwi","slug":{"current":"john"}},"PublishedAt":"2023-02-07T12:44:00.000Z"}},"pageContext":{"id":"-a5d809ef-d5fc-5ef5-be1d-5087702ee294"}},"staticQueryHashes":["196044662"]}